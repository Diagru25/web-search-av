import {
  Controller,
  Get,
  Post,
  Body,
  Patch,
  Param,
  Delete,
  UseGuards,
  UseInterceptors,
  UploadedFile,
  Query,
  BadRequestException,
  Res,
} from '@nestjs/common';
import { FileInterceptor } from '@nestjs/platform-express';
import { Response } from 'express';
import { diskStorage } from 'multer';
import { extname } from 'path';
import { createReadStream, existsSync, readFileSync } from 'fs';
import * as crypto from 'crypto';
import { MalwareService } from './malware.service';
import {
  CreateMalwareDto,
  UpdateMalwareDto,
  SearchMalwareDto,
} from './dto/malware.dto';
import { JwtAuthGuard } from '../auth/jwt-auth.guard';

@Controller('malware')
@UseGuards(JwtAuthGuard)
export class MalwareController {
  constructor(private readonly malwareService: MalwareService) {}

  @Post()
  @UseInterceptors(
    FileInterceptor('file', {
      storage: diskStorage({
        destination: process.env.UPLOAD_PATH || './uploads',
        filename: (req, file, cb) => {
          const uniqueSuffix =
            Date.now() + '-' + Math.round(Math.random() * 1e9);
          cb(null, uniqueSuffix + extname(file.originalname));
        },
      }),
      fileFilter: (req, file, cb) => {
        // Accept all file types for malware samples
        cb(null, true);
      },
      limits: {
        fileSize: 50 * 1024 * 1024, // 50MB
      },
    }),
  )
  async create(
    @Body() createMalwareDto: CreateMalwareDto,
    @UploadedFile() file: Express.Multer.File,
  ) {
    if (!file) {
      throw new BadRequestException('File is required');
    }

    // Calculate MD5 hash from uploaded file
    const fileBuffer = readFileSync(file.path);
    const md5Hash = crypto.createHash('md5').update(fileBuffer).digest('hex');

    // Set calculated MD5 and file info
    createMalwareDto.md5 = md5Hash;
    createMalwareDto.originalName = file.originalname;
    createMalwareDto.fileSize = file.size;

    return this.malwareService.create(createMalwareDto, file.path);
  }

  @Get()
  findAll(
    @Query('pageIndex') pageIndex?: number,
    @Query('pageSize') pageSize?: number,
  ) {
    return this.malwareService.findAll(
      pageIndex ? parseInt(pageIndex.toString()) : 1,
      pageSize ? parseInt(pageSize.toString()) : 10,
    );
  }

  @Get('search')
  search(@Query() searchDto: SearchMalwareDto) {
    return this.malwareService.search(searchDto);
  }

  @Get('statistics')
  getStatistics() {
    return this.malwareService.getStatistics();
  }

  @Get(':id/download')
  async downloadFile(@Param('id') id: string, @Res() res: Response) {
    try {
      const malware = await this.malwareService.findOne(id);

      if (!existsSync(malware.filePath)) {
        throw new BadRequestException('File not found on disk');
      }

      const file = createReadStream(malware.filePath);
      const filename = malware.originalName || malware.sampleName;

      res.set({
        'Content-Type': 'application/octet-stream',
        'Content-Disposition': `attachment; filename="${filename}"`,
        'Content-Length': malware.fileSize?.toString() || '',
      });

      file.pipe(res);
    } catch {
      throw new BadRequestException('Error downloading file');
    }
  }

  @Get(':id')
  findOne(@Param('id') id: string) {
    return this.malwareService.findOne(id);
  }

  @Patch(':id')
  @UseInterceptors(
    FileInterceptor('file', {
      storage: diskStorage({
        destination: process.env.UPLOAD_PATH || './uploads',
        filename: (req, file, cb) => {
          const uniqueSuffix =
            Date.now() + '-' + Math.round(Math.random() * 1e9);
          cb(null, uniqueSuffix + extname(file.originalname));
        },
      }),
      fileFilter: (req, file, cb) => {
        // Accept all file types for malware samples
        cb(null, true);
      },
      limits: {
        fileSize: 50 * 1024 * 1024, // 50MB
      },
    }),
  )
  async update(
    @Param('id') id: string,
    @Body() updateMalwareDto: UpdateMalwareDto,
    @UploadedFile() file?: Express.Multer.File,
  ) {
    // If new file is uploaded, calculate new MD5 and update file info
    if (file) {
      const fileBuffer = readFileSync(file.path);
      const md5Hash = crypto.createHash('md5').update(fileBuffer).digest('hex');

      updateMalwareDto.md5 = md5Hash;
      updateMalwareDto.originalName = file.originalname;
      updateMalwareDto.fileSize = file.size;

      return this.malwareService.update(id, updateMalwareDto, file.path);
    }

    // If no file, just update other fields (don't change MD5)
    return this.malwareService.update(id, updateMalwareDto);
  }

  @Delete(':id')
  remove(@Param('id') id: string) {
    return this.malwareService.remove(id);
  }
}
