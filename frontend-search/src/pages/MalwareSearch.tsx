import React, { useState } from "react";
import {
  Input,
  List,
  Typography,
  message,
  Segmented,
  Pagination,
  Descriptions,
  Card,
  Button,
} from "antd";
import { DownloadOutlined } from "@ant-design/icons";
import { malwareAPI } from "../services/api";
import type {
  MalwareSearchRequest,
  PaginatedResponse,
  MalwareItem,
} from "../services/api";

const { Title } = Typography;

interface ApiError {
  response?: {
    data?: {
      message?: string;
    };
  };
  message?: string;
}

const MalwareSearch: React.FC = () => {
  const [query, setQuery] = useState("");
  const [searchType, setSearchType] = useState<"hash" | "name" | "family">(
    "name"
  );
  const [results, setResults] = useState<PaginatedResponse<MalwareItem> | null>(
    null
  );
  const [loading, setLoading] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [pageSize] = useState(10);

  const handleSearch = async (page: number = 1) => {
    if (!query.trim()) {
      message.warning("Vui lòng nhập từ khóa tìm kiếm.");
      return;
    }

    setLoading(true);
    try {
      const searchParams: MalwareSearchRequest = {
        pageIndex: page,
        pageSize: pageSize,
      };

      // Add search parameter based on search type
      if (searchType === "name") {
        searchParams.sampleName = query.trim();
      } else if (searchType === "hash") {
        searchParams.md5 = query.trim();
      } else if (searchType === "family") {
        searchParams.sampleName = query.trim(); // Use sampleName for family search too
      }

      const response = await malwareAPI.search(searchParams);
      setResults(response);
      setCurrentPage(page);

      if (response.items.length === 0) {
        message.info("Không tìm thấy kết quả phù hợp.");
      } else {
        message.success(`Tìm thấy ${response.total} kết quả.`);
      }
    } catch (error: unknown) {
      console.error("Search error:", error);
      const apiError = error as ApiError;
      const errorMessage =
        apiError.response?.data?.message ||
        apiError.message ||
        "Có lỗi xảy ra khi tìm kiếm. Vui lòng thử lại.";
      message.error(errorMessage);
      setResults(null);
    } finally {
      setLoading(false);
    }
  };

  const handlePageChange = (page: number) => {
    handleSearch(page);
  };

  const handleDownload = async (malwareId: string, fileName: string) => {
    try {
      message.loading("Đang tải file...", 0);
      const response = await malwareAPI.download(malwareId);

      // Create blob and download
      const blob = new Blob([response]);
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement("a");
      link.href = url;
      link.download = fileName;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      window.URL.revokeObjectURL(url);

      message.destroy();
      message.success("Tải file thành công!");
    } catch (error: unknown) {
      message.destroy();
      console.error("Download error:", error);
      const apiError = error as ApiError;
      const errorMessage =
        apiError.response?.data?.message ||
        apiError.message ||
        "Có lỗi xảy ra khi tải file. Vui lòng thử lại.";
      message.error(errorMessage);
    }
  };

  const formatFileSize = (bytes: number): string => {
    if (bytes === 0) return "0 Bytes";
    const k = 1024;
    const sizes = ["Bytes", "KB", "MB", "GB"];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
  };

  const formatDate = (dateString: string): string => {
    return new Date(dateString).toLocaleDateString("vi-VN", {
      year: "numeric",
      month: "2-digit",
      day: "2-digit",
      hour: "2-digit",
      minute: "2-digit",
    });
  };

  return (
    <div>
      <Title level={2} style={{ marginTop: 0 }}>
        Tìm kiếm mã độc
      </Title>

      {/* Search controls */}
      <Card style={{ marginBottom: 24 }}>
        <div
          style={{
            display: "flex",
            gap: 12,
            alignItems: "center",
          }}
        >
          <Segmented
            size="large"
            value={searchType}
            onChange={setSearchType}
            options={[
              { label: "Tên", value: "name" },
              { label: "Hash (MD5)", value: "hash" },
            ]}
          />

          <Input.Search
            placeholder="Nhập từ khóa tìm kiếm..."
            enterButton="Tìm kiếm"
            size="large"
            value={query}
            onChange={(e) => setQuery(e.target.value)}
            onSearch={() => handleSearch(1)}
            loading={loading}
            style={{ flex: 1 }}
          />
        </div>
      </Card>

      {/* Results */}
      {results && (
        <Card>
          <div style={{ marginBottom: 16, color: "#666" }}>
            Tìm thấy {results.total} kết quả (trang {results.pageIndex}/
            {Math.ceil(results.total / results.pageSize)})
          </div>

          <List
            bordered
            dataSource={results.items}
            renderItem={(item: MalwareItem) => (
              <List.Item
                actions={[
                  <Button
                    key="download"
                    type="primary"
                    icon={<DownloadOutlined />}
                    onClick={() => handleDownload(item._id, item.sampleName)}
                    size="small"
                  >
                    Tải file
                  </Button>,
                ]}
              >
                <List.Item.Meta
                  title={
                    <div>
                      <span style={{ fontWeight: "bold" }}>
                        {item.sampleName}
                      </span>
                    </div>
                  }
                  description={
                    <div>
                      <Descriptions column={1} size="small">
                        <Descriptions.Item label="MD5">
                          {item.md5}
                        </Descriptions.Item>
                        <Descriptions.Item label="Kích thước">
                          {item.fileSize
                            ? formatFileSize(item.fileSize)
                            : "N/A"}
                        </Descriptions.Item>
                        <Descriptions.Item label="Ngày thu thập">
                          {formatDate(item.collectionDate)}
                        </Descriptions.Item>
                      </Descriptions>
                      {item.description && (
                        <div style={{ marginTop: 8 }}>{item.description}</div>
                      )}
                    </div>
                  }
                />
              </List.Item>
            )}
            locale={{ emptyText: "Không tìm thấy mã độc nào." }}
          />

          {/* Pagination */}
          {Math.ceil(results.total / results.pageSize) > 1 && (
            <div style={{ textAlign: "center", marginTop: 16 }}>
              <Pagination
                current={currentPage}
                total={results.total}
                pageSize={pageSize}
                onChange={handlePageChange}
                showSizeChanger={false}
                showQuickJumper
                showTotal={(total, range) =>
                  `${range[0]}-${range[1]} của ${total} kết quả`
                }
              />
            </div>
          )}
        </Card>
      )}
    </div>
  );
};

export default MalwareSearch;
