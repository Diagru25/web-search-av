import React, { useState, useEffect } from "react";
import {
  Table,
  Button,
  Space,
  Typography,
  message,
  Popconfirm,
  Input,
  DatePicker,
  Card,
  Tag,
  Tooltip,
  Form,
  Select,
} from "antd";
import {
  PlusOutlined,
  EditOutlined,
  DeleteOutlined,
  DownloadOutlined,
  SearchOutlined,
  ReloadOutlined,
} from "@ant-design/icons";
import type { ColumnsType } from "antd/es/table";
import dayjs, { Dayjs } from "dayjs";
import { malwareAPI, collectionUnitAPI } from "../../services/api";
import type {
  MalwareItem,
  CreateMalwareRequest,
  UpdateMalwareRequest,
  MalwareSearchRequest,
  CollectionUnitItem,
} from "../../services/api";
import CreateMalwareModal, {
  type CreateFormValues,
} from "./CreateMalwareModal";
import UpdateMalwareModal, {
  type UpdateFormValues,
} from "./UpdateMalwareModal";

const { Title } = Typography;
const { RangePicker } = DatePicker;

interface ApiError {
  response?: {
    data?: {
      message?: string;
    };
  };
  message?: string;
}

const MalwareManagement: React.FC = () => {
  const [malwareList, setMalwareList] = useState<MalwareItem[]>([]);
  const [total, setTotal] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [pageSize, setPageSize] = useState(10);
  const [loading, setLoading] = useState(false);
  const [searchText, setSearchText] = useState("");
  const [dateRange, setDateRange] = useState<
    [Dayjs | null, Dayjs | null] | null
  >(null);
  const [selectedUnit, setSelectedUnit] = useState<string>("");
  const [collectionUnits, setCollectionUnits] = useState<CollectionUnitItem[]>(
    []
  );

  // Modal states
  const [isCreateModalVisible, setIsCreateModalVisible] = useState(false);
  const [isEditModalVisible, setIsEditModalVisible] = useState(false);
  const [editingRecord, setEditingRecord] = useState<MalwareItem | null>(null);

  // Forms
  const [createForm] = Form.useForm();
  const [editForm] = Form.useForm();

  // Fetch data
  const fetchMalwareList = async (page: number = 1, size: number = 10) => {
    setLoading(true);
    try {
      const data = await malwareAPI.getAll({
        pageIndex: page,
        pageSize: size,
      });
      setMalwareList(data.items);
      setTotal(data.total);
      setCurrentPage(data.pageIndex);
      setPageSize(data.pageSize);
    } catch (error: unknown) {
      const apiError = error as ApiError;
      message.error(
        apiError.response?.data?.message || "Lỗi khi tải danh sách mã độc"
      );
    } finally {
      setLoading(false);
    }
  };

  // Fetch collection units
  const fetchCollectionUnits = async () => {
    try {
      const units = await collectionUnitAPI.getAll();
      setCollectionUnits(units);
    } catch (error: unknown) {
      const apiError = error as ApiError;
      message.error(
        apiError.response?.data?.message ||
          "Lỗi khi tải danh sách đơn vị thu thập"
      );
    }
  };

  useEffect(() => {
    fetchMalwareList();
    fetchCollectionUnits();
  }, []);

  // Handle pagination change
  const handleTableChange = (page: number, size?: number) => {
    const newPageSize = size || pageSize;
    setCurrentPage(page);
    setPageSize(newPageSize);
    fetchMalwareList(page, newPageSize);
  };

  // Reload data wrapper
  const handleReload = () => {
    fetchMalwareList(currentPage, pageSize);
  };

  // Search function
  const handleSearch = async () => {
    setLoading(true);
    try {
      const searchParams: Partial<MalwareSearchRequest> = {
        pageIndex: 1,
        pageSize: pageSize,
      };

      if (searchText) {
        searchParams.sampleName = searchText;
      }
      if (selectedUnit) {
        searchParams.collectionUnit = selectedUnit;
      }
      if (dateRange && dateRange[0] && dateRange[1]) {
        searchParams.fromDate = dateRange[0].toISOString();
        searchParams.toDate = dateRange[1].toISOString();
      }

      const response = await malwareAPI.search(searchParams);
      setMalwareList(response.items);
      setTotal(response.total);
      setCurrentPage(response.pageIndex);
    } catch (error: unknown) {
      const apiError = error as ApiError;
      message.error(apiError.response?.data?.message || "Lỗi khi tìm kiếm");
    } finally {
      setLoading(false);
    }
  };

  // Create malware
  const handleCreate = async (values: CreateFormValues) => {
    try {
      const createData: CreateMalwareRequest = {
        sampleName: values.sampleName,
        collectionUnit: values.collectionUnit,
        collectionDate: values.collectionDate.toISOString(),
        description: values.description,
        md5: values.md5,
        file: values.file.file,
      };

      await malwareAPI.create(createData);
      message.success("Tạo mã độc thành công!");
      setIsCreateModalVisible(false);
      createForm.resetFields();
      fetchMalwareList(currentPage, pageSize);
    } catch (error: unknown) {
      const apiError = error as ApiError;
      message.error(apiError.response?.data?.message || "Lỗi khi tạo mã độc");
    }
  };

  // Update malware
  const handleUpdate = async (values: UpdateFormValues) => {
    if (!editingRecord) return;

    try {
      const updateData: UpdateMalwareRequest = {
        sampleName: values.sampleName,
        collectionUnit: values.collectionUnit,
        collectionDate: values.collectionDate.toISOString(),
        description: values.description,
        ...(values.file && { file: values.file.file }),
      };

      await malwareAPI.update(editingRecord._id, updateData);
      message.success("Cập nhật mã độc thành công!");
      setIsEditModalVisible(false);
      setEditingRecord(null);
      editForm.resetFields();
      fetchMalwareList(currentPage, pageSize);
    } catch (error: unknown) {
      const apiError = error as ApiError;
      message.error(
        apiError.response?.data?.message || "Lỗi khi cập nhật mã độc"
      );
    }
  };

  // Delete malware
  const handleDelete = async (id: string) => {
    try {
      await malwareAPI.delete(id);
      message.success("Xóa mã độc thành công!");
      fetchMalwareList(currentPage, pageSize);
    } catch (error: unknown) {
      const apiError = error as ApiError;
      message.error(apiError.response?.data?.message || "Lỗi khi xóa mã độc");
    }
  };

  // Download file
  const handleDownload = async (record: MalwareItem) => {
    try {
      const blob = await malwareAPI.download(record._id);
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement("a");
      link.href = url;
      link.download = record.originalName || record.sampleName;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      window.URL.revokeObjectURL(url);
      message.success("Tải xuống thành công!");
    } catch (error: unknown) {
      const apiError = error as ApiError;
      message.error(apiError.response?.data?.message || "Lỗi khi tải xuống");
    }
  };

  // Edit modal
  const showEditModal = (record: MalwareItem) => {
    setEditingRecord(record);
    editForm.setFieldsValue({
      sampleName: record.sampleName,
      md5: record.md5,
      collectionUnit:
        typeof record.collectionUnit === "string"
          ? record.collectionUnit
          : record.collectionUnit._id,
      collectionDate: dayjs(record.collectionDate),
      description: record.description,
    });
    setIsEditModalVisible(true);
  };

  // Table columns
  const columns: ColumnsType<MalwareItem> = [
    {
      title: "Tên mẫu",
      dataIndex: "sampleName",
      key: "sampleName",
      width: 200,
      ellipsis: true,
    },
    {
      title: "MD5",
      dataIndex: "md5",
      key: "md5",
      width: 200,
      render: (md5: string) => (
        <Tooltip title={md5}>
          <Tag color="blue" style={{ fontFamily: "monospace" }}>
            {md5.substring(0, 8)}...
          </Tag>
        </Tooltip>
      ),
    },
    {
      title: "Đơn vị thu thập",
      dataIndex: "collectionUnit",
      key: "collectionUnit",
      width: 150,
      render: (_, record) => {
        const collectionUnit = record.collectionUnit;
        if (typeof collectionUnit === "string") {
          // If it's just an ID, find the name from collectionUnits array
          const unit = collectionUnits.find((u) => u._id === collectionUnit);
          return unit ? unit.name : collectionUnit;
        } else {
          // If it's a populated object, get the name directly
          return collectionUnit.name;
        }
      },
    },
    {
      title: "Ngày thu thập",
      dataIndex: "collectionDate",
      key: "collectionDate",
      width: 150,
      render: (date: string) => dayjs(date).format("DD/MM/YYYY"),
    },
    {
      title: "Kích thước",
      dataIndex: "fileSize",
      key: "fileSize",
      width: 120,
      render: (size: number) => {
        if (!size) return "-";
        const kb = size / 1024;
        const mb = kb / 1024;
        if (mb >= 1) return `${mb.toFixed(1)} MB`;
        return `${kb.toFixed(1)} KB`;
      },
    },
    {
      title: "Mô tả",
      dataIndex: "description",
      key: "description",
      ellipsis: true,
      render: (description: string) => description || "-",
    },
    {
      title: "Thao tác",
      key: "actions",
      width: 150,
      render: (_, record) => (
        <Space size="small">
          <Tooltip title="Chỉnh sửa">
            <Button
              type="text"
              icon={<EditOutlined />}
              onClick={() => showEditModal(record)}
            />
          </Tooltip>
          <Tooltip title="Tải xuống">
            <Button
              type="text"
              icon={<DownloadOutlined />}
              onClick={() => handleDownload(record)}
            />
          </Tooltip>
          <Popconfirm
            title="Bạn có chắc chắn muốn xóa mã độc này?"
            onConfirm={() => handleDelete(record._id)}
            okText="Xóa"
            cancelText="Hủy"
          >
            <Tooltip title="Xóa">
              <Button type="text" danger icon={<DeleteOutlined />} />
            </Tooltip>
          </Popconfirm>
        </Space>
      ),
    },
  ];

  return (
    <div>
      <Title level={2} style={{ marginTop: 0 }}>
        Quản lý mã độc
      </Title>

      {/* Search and filters */}
      <Card style={{ marginBottom: 16 }}>
        <Space
          direction="horizontal"
          style={{ width: "100%", justifyContent: "space-between" }}
        >
          <Space wrap>
            <Input
              placeholder="Tìm theo tên mẫu"
              value={searchText}
              onChange={(e) => setSearchText(e.target.value)}
              style={{ width: 200 }}
              onPressEnter={handleSearch}
            />
            <Select
              placeholder="Đơn vị thu thập"
              value={selectedUnit || null}
              onChange={setSelectedUnit}
              style={{ width: 150 }}
              allowClear
              options={collectionUnits.map((unit) => ({
                label: unit.name,
                value: unit._id,
              }))}
            />
            <RangePicker
              value={dateRange}
              onChange={setDateRange}
              format="DD/MM/YYYY"
              placeholder={["Từ ngày", "Đến ngày"]}
            />
            <Button
              type="primary"
              icon={<SearchOutlined />}
              onClick={handleSearch}
            >
              Tìm kiếm
            </Button>
          </Space>
          <Space>
            <Button icon={<ReloadOutlined />} onClick={handleReload}></Button>
            <Button
              type="primary"
              icon={<PlusOutlined />}
              onClick={() => setIsCreateModalVisible(true)}
            >
              Thêm mã độc
            </Button>
          </Space>
        </Space>
      </Card>

      {/* Table */}
      <Table
        size="small"
        columns={columns}
        dataSource={malwareList}
        rowKey="_id"
        loading={loading}
        pagination={{
          current: currentPage,
          total: total,
          pageSize: pageSize,
          showSizeChanger: true,
          showQuickJumper: true,
          showTotal: (total, range) =>
            `${range[0]}-${range[1]} của ${total} mã độc`,
          onChange: handleTableChange,
          onShowSizeChange: handleTableChange,
        }}
        scroll={{ x: 1200 }}
      />

      <CreateMalwareModal
        visible={isCreateModalVisible}
        onCancel={() => setIsCreateModalVisible(false)}
        onSubmit={handleCreate}
        form={createForm}
        collectionUnits={collectionUnits}
      />

      <UpdateMalwareModal
        visible={isEditModalVisible}
        onCancel={() => {
          setIsEditModalVisible(false);
          setEditingRecord(null);
        }}
        onSubmit={handleUpdate}
        form={editForm}
        collectionUnits={collectionUnits}
        currentMalware={editingRecord}
      />
    </div>
  );
};

export default MalwareManagement;
